### --------------- List of tags that are used to select a runner. --------------- ###
## Обязательный блок для запуска gitlab-ci. Определяет, на каких runner-ах будет запущен CI/CD путем выбора его с помощью tag'а. ##

default:
  tags:
  - bigdata
  - docker

variables:
  DEFAULT_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}

### --------------- Defines a job stage. --------------- ###
## Stage .pre выполняется перед всем остальным кодом. stage .post выполняется после всего остального кода. ##
## Так же можно задать порядок выполнения stage-ов, указав их по порядку в этом блоке. ##

stages:
  #- pre-commit
- build main image
- static analysis
- build test image
- tests
- post tests
- artifactory
- deploy
- clean_repo

### --------------- Include gitlab-ci-templates --------------- ###
## Добавляет в текущую конфигурацию CI\CD template's из DevOps репозитория для переиспользования. ##

include:
  # VAULT
- project: DevOps/cicd-store/gitlabci/vault
  ref: v5
  file:
  - .base_vault_get_field.yml

  # DOCKER
- project: DevOps/cicd-store/gitlabci/docker
  ref: v8
  file:
  - .base_docker_build.yml
  - .base_docker_cleaner.yml

  # PIP BUILD AND DEPLOY TO JFROG
- project: DevOps/cicd-store/gitlabci/python
  ref: v4
  file: .base_pip_pkg_build_and_deploy_to_jfrog.yml

  # Pages
- project: DevOps/cicd-store/gitlabci/pages
  ref: v2
  file: .base_pages_deploy_sphinx.yml

  # Artifactory
- project: DevOps/cicd-store/gitlabci/artifactory
  ref: v4
  file:
  - .base_rt_upload.yml
  - .base_rt_cli.yml

### --------------- Workflow rules --------------- ###
workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: never
    # do not run anything on push commit to master branch, tests and linters have already executed on develop branch
  - if: $CI_COMMIT_BRANCH =~ /^(master|main)$/
    when: never
  - when: always

### --------------- Get VAULT SECRET --------------- ###
## Переиспользование добавленного template'а по добавлению SSH-ключа пользователя ansible. ##
devops_get_techuser_secrets:
  extends: .base_vault_get_field
  variables:
    VAULT_ROLE_ID: $DEVOPS_VAULT_ROLE_ID
    VAULT_SECRET_ID: $DEVOPS_VAULT_SECRET_ID
    VAULT_PATH: platform/onetools/$CICD_USER_NAME
    VAULT_FIELD: password
    VARIABLE_NAME: CICD_USER_PASSWORD
  interruptible: true

build_docker_image:
  extends: .base_docker_build
  stage: build main image
  variables:
    CICD_DOCKER__IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    CICD_DOCKER__IMAGE_NAME: ${DEFAULT_IMAGE}
    CICD_DOCKER__CACHE_FROM: ${DEFAULT_IMAGE}:develop
    CICD_DOCKER__STOP_IF_EXISTS: 'false'
    CICD_DOCKER__BUILD_EXTRA_ARGS: --pull --force-rm
  rules:
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

mypy:
  image: ${DEFAULT_IMAGE}:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
  - python3 -m mypy horizon_hwm_store
  rules:
    # do not run linters after pushing git tag, code was already linted
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

flake8:
  image: ${DEFAULT_IMAGE}:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
  - python3 -m flake8 --format=default . 2>&1 | tee flake8.txt
  artifacts:
    when: always
    paths: [flake8.txt]
  rules:
    # do not run linters after pushing git tag, code was already linted
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

black:
  image: ${DEFAULT_IMAGE}:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
  - python3 -m black . --check
  rules:
    # do not run linters after pushing git tag, code was already linted
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  interruptible: true

tests:
  image: ${DEFAULT_IMAGE}:${CI_COMMIT_REF_SLUG}
  stage: tests
  variables:
    # Enables creation of a Docker network per build with the docker executor
    HORIZON__DATABASE__URL: "postgresql+asyncpg://horizon:I8p4E2mULz6v@db:5432/horizon"
    HORIZON__AUTH__ACCESS_TOKEN__SECRET_KEY: "bae1thahr8Iyaisai0kohvoh1aeg5quu"
    HORIZON__AUTH__PROVIDER: "horizon.backend.providers.auth.dummy.DummyAuthProvider"
    HORIZON__SERVER__LOGGING__PRESET: "colored"
    HORIZON__SERVER__DEBUG: "false"
    FF_NETWORK_PER_BUILD: 1
  rules:
    # do not run tests after pushing git tag, code was already tested
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success
  services:
  - name: central-mirror.services.mts.ru/postgres:15-alpine
    alias: db
  - name: sregistry.mts.ru/onetools/bigdata/platform/onetools/horizon/backend:0.0.1
    alias: horizon
  script:
  - sed '/^$/d' ./.env.docker | sed '/^#/d' | sed 's/^/export /' > ./env
  - source ./env
  - ./docker/wait-for-curl.sh -u http://horizon:8000/monitoring/ping -t 200
  - pip install .
  - ./run_tests.sh
  # if Horizon backend is not ready, and timeout is reached, retry
  retry: 2
  artifacts:
    when: always
    paths:
    - ${CI_PROJECT_DIR}/reports
  interruptible: true

# comment job until there are no files to upload
#coverage:
#  image: ${DEFAULT_IMAGE}:${CI_COMMIT_REF_SLUG}
#  stage: post tests
#  dependencies:
#  - tests
#  rules:
#  - if: $CI_COMMIT_TAG
#    when: never
#  - when: on_success
#  script:
#  - ./combine_coverage.sh
#  coverage: /TOTAL.*?(\d+\.?\d+)?%/
#  artifacts:
#    when: always
#    paths:
#    - ${CI_PROJECT_DIR}/reports
#    reports:
#      junit:
#      - ${CI_PROJECT_DIR}/reports/junit/*.xml
#      coverage_report:
#        coverage_format: cobertura
#        path: ${CI_PROJECT_DIR}/reports/coverage.xml
#    expire_in: 7 days
#  interruptible: true

### --------------- Build and publish docs --------------- ###
build_docs:
  image: ${DEFAULT_IMAGE}:${DOCKER_IMAGE_TAG}
  stage: post tests
  variables:
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  rules:
  - if: $CI_COMMIT_TAG
    variables:
      DOCKER_IMAGE_TAG: develop
    when: on_success
  - when: on_success
  before_script:
  - export VERSION=$(python setup.py --version)
  - echo "VERSION=$VERSION" >> deploy.env
  script:
  - cd docs
  - make html
  - tar cvzf html-${VERSION}.tar.gz -C _build/html .
  - >
    if [ "$CI_COMMIT_TAG" != "" ];
    then cp html-${VERSION}.tar.gz html-latest.tar.gz;
    fi
  artifacts:
    paths:
    - docs/html-*.tar.gz
    reports:
      dotenv: deploy.env
  interruptible: true

publish_docs:
  extends: .base_rt_upload
  stage: artifactory
  variables:
    CICD_ARTIFACTORY__URL: https://artifactory.mts.ru/artifactory
    CICD_ARTIFACTORY__USER: $CICD_USER_NAME
    CICD_ARTIFACTORY__PASSWORD: $CICD_USER_PASSWORD
    CICD_ARTIFACTORY__ARTIFACTS_PATTERN: docs/html-*.tar.gz
    CICD_ARTIFACTORY__UPLOAD_PATH: docs-onetl-generic-local/${CI_PROJECT_NAME}/
  dependencies:
  - build_docs
  - devops_get_techuser_secrets
  interruptible: true

## --------------- DEPLOY --------------- ###
pip:
  extends: .base_pip_pkg_build_and_deploy_to_jfrog
  stage: artifactory
  image: ${DEFAULT_IMAGE}:${DOCKER_IMAGE_TAG}
  variables:
    DOCKER_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    CICD_PYTHON__REPO_URL: https://artifactory.mts.ru/artifactory/api/pypi/own-onetl-pypi-local/
    CICD_PYTHON__REPO_USER: $CICD_USER_NAME
    CICD_PYTHON__REPO_PASSWORD: $CICD_USER_PASSWORD
  dependencies:
  - devops_get_techuser_secrets
  rules:
  - if: $CI_COMMIT_TAG
    variables:
      DOCKER_IMAGE_TAG: develop
    when: on_success
  - when: on_success
  interruptible: true

remove_dev_versions:
  extends: .base_rt_cli
  stage: artifactory
  dependencies:
  - devops_get_techuser_secrets
  variables:
    CICD_ARTIFACTORY__URL: https://artifactory.mts.ru/artifactory
    CICD_ARTIFACTORY__USER: $CICD_USER_NAME
    CICD_ARTIFACTORY__PASSWORD: $CICD_USER_PASSWORD
  script:
    # Remove artifacts for feature/bug branch
  - export CI_COMMIT_REF_SLUG=$(echo $CI_COMMIT_REF_SLUG | tr '-' '.')
  - jf rt delete docs-onetl-generic-local/${CI_PROJECT_NAME}/docs/html-${CI_COMMIT_TAG}.dev*
  - jf rt delete own-onetl-pypi-local/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}.dev*
  rules:
    # run only if release
  - if: $CI_COMMIT_TAG
    when: on_success
  - when: never
  allow_failure: true

pages:
  extends: .base_pages_deploy_sphinx
  stage: deploy
  variables:
    CICD_PAGES__ARTIFACTORY_USER: $CICD_USER_NAME
    CICD_PAGES__ARTIFACTORY_PASSWORD: $CICD_USER_PASSWORD
    CICD_PAGES__ARTIFACTORY_DOCS_PATH: docs-onetl-generic-local/${CI_PROJECT_NAME}/docs
  dependencies:
  - publish_docs
  - devops_get_techuser_secrets
  interruptible: true

## --------------- Remove artifacts after remove feature/bug branch --------------- ###
start_review_pip:
  stage: .post
  dependencies:
  - build_docs
  environment:
    name: review/pip-mts/$CI_COMMIT_REF_SLUG
    url: ${CI_PAGES_URL}/${VERSION}/
    on_stop: stop_review_pip
  script:
  - echo "Start review"
  rules:
    # environment is used to remove artifacts build in feature/ and bugfix/ branches only
    # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success

stop_review_pip:
  extends: .base_rt_cli
  stage: .post
  dependencies:
  - devops_get_techuser_secrets
  variables:
    CICD_ARTIFACTORY__URL: https://artifactory.mts.ru/artifactory
    CICD_ARTIFACTORY__USER: $CICD_USER_NAME
    CICD_ARTIFACTORY__PASSWORD: $CICD_USER_PASSWORD
  script:
    # Remove artifacts for feature/bug branch
  - export CI_COMMIT_REF_SLUG=$(echo $CI_COMMIT_REF_SLUG | tr '-' '.')
  - jf rt delete docs-onetl-generic-local/${CI_PROJECT_NAME}/docs/*+${CI_COMMIT_REF_SLUG}*
  - jf rt delete own-onetl-pypi-local/${CI_PROJECT_NAME}/*+${CI_COMMIT_REF_SLUG}
  environment:
    name: review/pip-mts/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    # environment is used to remove artifacts build in feature/ and bugfix/ branches only
    # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: manual
    allow_failure: true

start_review_docker:
  stage: .post
  environment:
    name: review/docker/$CI_COMMIT_REF_SLUG
    on_stop: stop_review_docker
  script:
  - echo "Start review"
  rules:
    # environment is used to remove artifacts build in feature/ and bugfix/ branches only
    # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: on_success

stop_review_docker:
  extends: .base_docker_cleaner
  stage: .post
  dependencies: []
  variables:
    CICD_DOCKER__IMAGE_TAGS: $CI_COMMIT_REF_SLUG
  script:
  - !reference [.base_tools__bricks_send_usage_statistics, script]
  - !reference [.base_docker_cleaner__bricks_debug, script]
  - CICD_DOCKER__IMAGE_NAME=${HARBOR_PROJECT}/${CI_PROJECT_PATH}
  - !reference [.base_docker_cleaner__bricks_remove_tags, script]
  - !reference [.base_docker_cleaner__bricks_remove_tags, script]
  environment:
    name: review/docker/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    # environment is used to remove artifacts build in feature/ and bugfix/ branches only
    # dev and release packages are left intact
  - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
    when: never
  - if: $CI_COMMIT_TAG
    when: never
  - when: manual
    allow_failure: true
