name: Tests
on:
  push:
    branches:
      - develop
  pull_request:
    branches-ignore:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON: '3.12'

jobs:
  tests:
    name: Run tests (Python ${{ matrix.python-version }}, Pydantic ${{ matrix.pydantic-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: '3.7'
            pydantic-version: '1'
            os: ubuntu-latest

          - python-version: '3.12'
            pydantic-version: '2'
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start Backend Container
        run: |
          docker compose down -v --remove-orphans
          docker compose up --wait-timeout 5 -d
        env:
          COMPOSE_PROJECT_NAME: ${{ github.run_id }}-backend

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pydantic-${{ matrix.pydantic-version}}-tests-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-pydantic-${{ matrix.pydantic-version}}-tests-${{ hashFiles('requirements*.txt') }}
            ${{ runner.os }}-python-${{ matrix.python-version }}-pydantic-${{ matrix.pydantic-version}}-tests-
            ${{ runner.os }}-python-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -I -r requirements.txt -r requirements-test.txt "pydantic==${{ matrix.pydantic-version }}.*"

      - name: Build package
        run: |
          python setup.py --version
          python setup.py bdist_wheel sdist

      - name: Run tests
        run: |
          mkdir reports/ || echo "Directory exists"
          # required to register package in etl-entities
          pip install -e . --no-build-isolation
          source .env.local
          ./run_tests.sh

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ matrix.python-version }}-pydantic-${{ matrix.pydantic-version }}-os-${{ matrix.os }}
          path: reports/*

      - name: Shutdown Backend Container
        if: always()
        run: |
          docker compose down -v --remove-orphans
        env:
          COMPOSE_PROJECT_NAME: ${{ github.run_id }}-backend

  all_done:
    name: Tests done
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ env.DEFAULT_PYTHON }}-coverage-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.DEFAULT_PYTHON }}-coverage-${{ hashFiles('requirements*.txt') }}
            ${{ runner.os }}-python-${{ env.DEFAULT_PYTHON }}-coverage-
            ${{ runner.os }}-python
            ${{ runner.os }}-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -I -r requirements-test.txt

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: reports/
          pattern: coverage-*
          merge-multiple: true

      - name: Generate coverate reports
        run: ./combine_coverage.sh

      - name: Check coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./reports/coverage.xml
          fail_ci_if_error: true
        # TODO: remove after fixing https://github.com/codecov/codecov-cli/issues/367
          plugin: gcov

      - name: All done
        run: echo 1
